/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  HumanizationRequest as PrismaHumanizationRequest,
  User as PrismaUser,
} from "@prisma/client";

export class HumanizationRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.HumanizationRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.humanizationRequest.count(args);
  }

  async humanizationRequests<T extends Prisma.HumanizationRequestFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.HumanizationRequestFindManyArgs>
  ): Promise<PrismaHumanizationRequest[]> {
    return this.prisma.humanizationRequest.findMany<Prisma.HumanizationRequestFindManyArgs>(
      args
    );
  }
  async humanizationRequest<T extends Prisma.HumanizationRequestFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.HumanizationRequestFindUniqueArgs>
  ): Promise<PrismaHumanizationRequest | null> {
    return this.prisma.humanizationRequest.findUnique(args);
  }
  async createHumanizationRequest<
    T extends Prisma.HumanizationRequestCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.HumanizationRequestCreateArgs>
  ): Promise<PrismaHumanizationRequest> {
    return this.prisma.humanizationRequest.create<T>(args);
  }
  async updateHumanizationRequest<
    T extends Prisma.HumanizationRequestUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.HumanizationRequestUpdateArgs>
  ): Promise<PrismaHumanizationRequest> {
    return this.prisma.humanizationRequest.update<T>(args);
  }
  async deleteHumanizationRequest<
    T extends Prisma.HumanizationRequestDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.HumanizationRequestDeleteArgs>
  ): Promise<PrismaHumanizationRequest> {
    return this.prisma.humanizationRequest.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.humanizationRequest
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
